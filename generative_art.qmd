---
title: "Generative Art Lab"
author: "Chloe Feehan"
format: 
  html: 
    self-contained: true
    code-tools: true
    code-fold: true
    embed-resources: true
editor: visual
execute: 
  echo: true
  include: true
  message: false
  warning: false
---

```{r}
#| label: libraries
library(ggplot2)
library(scales)
library(ggthemes)
library(tibble)
library(gganimate)
library(tidyr)
library(tidyverse)
library(purrr)
library(ggthemes)

```

```{r}
#| label: Forest Art Piece
set.seed(1)
n <- 50
dat <- tibble(
  x0 = runif(n),
  y0 = runif(n),
  x1 = x0 + runif(n, min = -.2, max = .2),
  y1 = y0 + runif(n, min = -.2, max = .2),
  shade = runif(n), 
  size = runif(n)
)


pal <- c("darkslategray3", "aquamarine4", "cadetblue", "lightblue")


dat |>
  ggplot(aes(x = x0, y = y0,
             xend = x1, yend = y1,
             color = x0)) +
  geom_segment(show.legend = FALSE, linewidth = 30) +
  geom_point(show.legend = FALSE, size = 15, shape = 17, 
             color = "green4") +
  geom_point(show.legend = FALSE, size = 10, shape = 17, 
             color = "springgreen3") +
  geom_point(show.legend = FALSE, size = 6, shape = 17, 
             color = "lightgreen") +
  
  #coord_polar() +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_continuous(expand = c(0, 0)) + 
  scale_colour_gradientn(colours = pal) +
  scale_size(range = c(0, 10)) +
  theme_void() +
  labs(title = "Forest Flow") +
  theme(
    plot.title = element_text(family = "Times New Roman", size = 20, 
                              face = "italic", color = "black")
  )
```

The piece, Forest Flow, demonstrates an abstract depiction of a river flowing through a bright green forest. The vibrant color choices transport the viewer into a world of beauty where the lush forest intertwines with the gushing river. The use of various geometric shapes creates a mesmerizing spectacle as your eyes follow along the sharp and jagged turns of the river. 

The code style incorporates several geom_point functions. Each of these are set to a different size, creating the layers of the trees to add dimension. The shape is also specified to a triangle to create the idea of a tree. For the river section, geom_segment was used to obtain the flowy shape of the river. I created a manual color palette to choose the variation of blue colors. I used scale_color_gradient to add the colors to the plot.

```{r}
#| label: helper functions
# source: https://art-from-code.netlify.app/day-1/session-3/
show_polygon <- function(polygon, show_vertices = TRUE, ...) {
  
  pic <- ggplot(polygon, aes(x, y)) +
    geom_polygon(colour = "black", fill = NA, show.legend = FALSE, ...) + 
    coord_equal() + 
    theme_void()
  
  if(show_vertices == TRUE) {
    pic <- pic + geom_point(colour = "black", size = 2)
  }
  print(pic)
}

normalise_radius <- function(x, min, max) {
  normalize(x, from = c(-0.5, 0.5), to = c(min, max))
}

sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}
```


```{r}
#| label: Diamond Grid
# Base diamond shape
diamond <- tibble(
  x = c(0.5, 1, 0.5, 0, 0.5),
  y = c(0, 0.5, 1, 0.5, 0)
)

# Function to create a single diamond shifted by x_shift and y_shift
shift_diamond <- function(r_min, r_max, x_shift, y_shift, id) {
  diamond %>%
    mutate(
      x = x + x_shift,
      y = y + y_shift,
      id = id
    )
}

# Function to create a grid of diamonds
diamond_grid <- function(nx = 10, ny = 6, seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  
  diamond_settings <- expand_grid(
    r_min = .3, 
    r_max = .4, 
    x_shift = 1:nx, 
    y_shift = 1:ny
  ) %>%
    mutate(id = row_number())
  
  # Iterating across each diamond
  diamond_data <- pmap_dfr(diamond_settings, shift_diamond)
  
  # Building diamond Grid
  diamond_data %>%
    ggplot(aes(x, y, group = id, fill = as.factor(id))) +
    geom_polygon(linewidth = 0, show.legend = FALSE) +
    theme_void() +
    coord_equal(xlim = c(0, nx + 1), ylim = c(0, ny + 1)) +
    transition_time(id) + 
    shadow_mark() +
    labs(title = "Diamond Rainbow") +
    theme(
    plot.title = element_text(family = "Times New Roman", size = 20, 
                              face = "italic", color = "black", hjust = 0.5)
  )
}

# Create and show the grid of diamonds
grid <- diamond_grid(seed = 451)
grid

animate(grid, nframes = 100, fps = 10)

#source for shadow_mark: https://stackoverflow.com/questions/63980842/transition-time-with-shadow-mark-for-only-one-geom-layer
#source for gganimate: https://gganimate.com/
# source: Chatgpt for getting diamond proportions correct and help create shift_diamond function
```
The piece, Diamond Rainbow, is a dynamic piece captivating the audience with its changing colors and movement across the grid. Each diamond appears gracefully, establishing its place in the grid as the others begin to appear. The spectrum of colors evokes a sense of wonder, capturing the audience's imagination with its enchanting beauty.

The code uses several functions generated by the example provided in class. I adapted the code from the heart_grid to create a grid of diamonds. The diamond_grid function allows the user to specify the size of the grid, which is defaulted at 6 rows and 10 columns. The attribute "id" was converted to a factor to obtain the colors. Since it is converted to a factor, ggplot assigns a different color to each value of id, creating a unique color for each diamond. To build the animation, transition_time(id) was used to single out each diamond. The shadow_mark() function is used to make the diamonds stay in the grid shape, rather than disappearing.



